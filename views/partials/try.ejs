<script type="application/javascript">
  const exampleHtml = `
  <!DOCTYPE html>
<html lang="en" style="height: 100%">
    <head>
      <title>ORD-FS DEMO</title>
    </head>
    <body style="margin: 0; padding: 0; height:100%">
        <div style="border-radius: 0.5rem;
        background: linear-gradient(to right, black, #800080);
        width: 100%; text-align: center; height:100%; display: flex; justify-content: center; align-items: center;">
            <!-- BSV INSCRIPTION REFERENCE -->
            <img src="/content/971388081f6601b0e502adbfceef68d152e7f27ba5aff0230d2567aaa8acb768_0" style="width:100px; margin-right: 1rem;" alt="BSV Inscription" title="BSV Inscription" />
        </div>
    </body>
</html>`;

  const closeTryItOut = () => {
    document.querySelector("#tryItOut").classList.remove("block");
    document.querySelector("#tryItOut").classList.add("hidden");
  };

  let htmlElement = null;

  document.addEventListener("DOMContentLoaded", () => {
    htmlElement = document.querySelector("#editor");
    var editor = ace.edit(htmlElement);
    editor.setTheme("ace/theme/monokai");
    editor.session.setMode("ace/mode/html");
    editor.setOptions({
      fontSize: "11pt",
      fontFamily: "Monaco, Menlo, Consolas",

      showLineNumbers: true,
      showGutter: true,
      vScrollBarAlwaysVisible: true,
      enableBasicAutocompletion: true,
      enableLiveAutocompletion: true,
    });
    editor.setValue(exampleHtml.trim());
    editor.clearSelection();
    editor.session.on("change", function (delta) {
      // delta.start, delta.end, delta.lines, delta.action
      console.log(editor.getValue());
      preview(editor.getValue() || exampleHtml.trim());
    });
  });

  const inscribeCode = () => {
    let editor = ace.edit("editor");
    let code = editor.getValue();

    const b64Code = btoa(code);
    window.open(`https://1satordinals.com/inscribe?tab=html&code=${b64Code}`);
  };

  const copyCode = () => {
    let editor = ace.edit("editor");
    let copyText = editor.getValue();
    // Verify if clipboard writing is allowed
    isClipboardWritingAllowed()
      .then(function (allowed) {
        // Write to clipboard if allowed
        if (allowed) {
          navigator.clipboard.writeText(copyText).then(function () {
            console.log(
              "The text has been succesfully copied to the clipboard!"
            );
            document.getElementById("copy-label").innerHTML = "Copied!";
          });
        }
      })
      .catch(function (err) {
        console.log("Cannot copy to clipboard", err);
      });
  };

  const tryItOut = () => {
    let html = htmlElement.value;
    document.querySelector("#tryItOut").classList.remove("hidden");
    document.querySelector("#tryItOut").classList.add("block");

    if (!html || html.length === 0) {
      html = exampleHtml.trim();
      document.querySelector("#editor").value = html;
    }
    console.log({ html });
    try {
      // Display the HTML code as plain text in the 'preview' element
      const b64 = btoa(html);
      document.querySelector("#preview").src = `/preview/${b64}`;
    } catch (e) {
      console.error("Error displaying HTML code");
    }
  };

  // Determine whether is possible to write an image/text to the clipboard.
  function isClipboardWritingAllowed() {
    return new Promise(function (resolve, reject) {
      try {
        navigator.permissions
          .query({ name: "clipboard-write" })
          .then(function (status) {
            // PermissionStatus object
            // {
            //  onchange: null,
            //  state: "granted" (it could be as well `denied` or `prompt`)
            // }
            console.log(status);

            resolve(status.state == "granted");
          });
      } catch (error) {
        // This could be caused because of a Browser incompatibility or security error
        // Remember that this feature works only through HTTPS
        reject(error);
      }
    });
  }
</script>
<div
  class="p-2 text-white rounded w-full max-w-6xl mx-auto flex flex-col items-center justify-center"
  id="demo"
>
  <h2
    class="mb-4 text-4xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-[#673ab7] to-[#e91e63]"
  >
    Native Bitcoin API
  </h2>
  <h2 class="text-center mb-4 px-4 text-2xl">
    For Building Programmable HTML Inscriptions
  </h2>

  <div className="w-1/2">
    <p class="p-4 text-xl text-[#aaa] max-w-2xl">
      Bitcoin-native endpoints allow access to other inscriptions and blockchain
      data from within your code. You can reference JavaScript files, images,
      and even other HTML inscriptions. You can also access blockchain data such
      as transaction data, block data, and more!
    </p>
  </div>

  <div class="md:w-1/2">
    <ul>
      <li class="text-[#aaa] my-4">Access inscriptions across chains</li>
      <li class="api-item">/{inscriptionId | txid}</li>
      <li class="text-[#aaa] my-4">Preview your code before broadcasting</li>
      <li class="api-item">/preview/{b64Html}</li>
      <li class="text-[#aaa] my-4">
        Get blockchain info. Network is 'bsv'
      </li>
      <li class="api-item">/v1/{network}/block/latest</li>
      <li class="api-item">/v1/{network}/block/hash/{blockHash}</li>
      <li class="api-item">/v1/{network}/block/height/{blockHeight}</li>
      <li class="text-[#aaa] my-4">
        Compatible with recursive inscriptions
      </li>
      <li class="api-item">/content/{inscriptionId}</li>
    </ul>
  </div>

  <div class="text-[#aaa] max-w-2xl bg-[#111] p-4 flex flex-col my-8">
    This demo uses the preview endpoint to render inscription references in your
    code. When you're ready, use a minter like 1satordinals.com to inscribe your
    HTML to the blockchain.
    <button
      class="hover:bg-purple-800 transition my-8 font-bold cursor-pointer text-2xl bg-purple-600 text-white p-2 rounded-md hover:text-emerald-300"
      onclick="tryItOut()"
    >
      <h1>Live Demo</h1>
    </button>
  </div>
</div>
