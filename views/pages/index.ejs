<!DOCTYPE html>
<html lang="en">
  <head>
    <%- include('../partials/head'); %>

    <script>
      function getComplementaryDarkColor(lightColor) {
        const rgb = lightColor
          .match(/[A-Za-z0-9]{2}/g)
          .map((component) => parseInt(component, 16));
        const darkColor = rgb.map((component) => Math.max(0, component - 50));
        const darkHexColor = `#${darkColor
          .map((component) => component.toString(16).padStart(2, "0"))
          .join("")}`;
        return darkHexColor;
      }

      const preview = (html) => {
        if (html && html.length > 0) {
          try {
            // set iframe src to b64 encoded html
            const b64 = btoa(html);
            document.querySelector("#preview").src = "/preview/" + b64;
          } catch (e) {
            console.error("Invalid base64 encoded html");
          }
        }
      };
      const fetchBlockStats = async () => {
        try {
          const response = await fetch(
            "https://ordinals.shruggr.cloud/bsv/v1/block/latest"
          );
          const { height, hash } = await response.json();
          console.log({ height, hash });
          if (height && hash) {
            const color = stringToColor(hash);
            const color2 = stringToColor(height);
            const blinkingCursor = document.createElement("span");
            blinkingCursor.classList.add("animate-pulse");
            blinkingCursor.innerHTML = "|";

            document.querySelector(
              "#latest-block"
            ).innerHTML = `<span class="text-[${color2}]">block-${height} $</span> <span class="text-emerald-200">Your ordfs-server is up and running.</span><br />
<span class="text-[${color2}]">block-${height} $</span> <span class="bg-clip-text text-transparent bg-gradient-to-r to-[${color}] from-[${color2}]">Derived terminal colors from blockchain data</span><br />
<span class="text-[${color2}]">block-${height} $</span><br />
<span class="text-[${color2}]">block-${height} $</span> Set a TXT record on your domain <br />
<span class="text-[${color2}]">block-${height} $</span> to point to an ordinal. <br />
<span class="text-[${color2}]">block-${height} $</span> TXT='ordfs={outpoint}'<br />
<span class="text-[${color2}]">block-${height} $</span> Where {outpoint} is {txid}_{vout} on BSV,<br /><span class="text-[${color2}]">block-${height} $</span> and {txid}i{vin} on BTC.<br />
<span class="text-[${color2}]">block-${height} $</span><br />
<span class="text-[${color2}]">block-${height} $</span> Set a A or CNAME record on your domain <br />
<span class="text-[${color2}]">block-${height} $</span> to point to your ordfs-server.<br />
<span class="text-[${color2}]">block-${height} $</span> A=10.10.10.10 / CNAME=subdomain.mydomain.com<br /><span class="text-[${color2}]">block-${height} $</span> `;

            const darkColor = getComplementaryDarkColor(color);
            const darkColor2 = getComplementaryDarkColor(color2);

            document.querySelector("#latest-block").appendChild(blinkingCursor);
            document.querySelector("#latest-block").classList.remove("hidden");
            document.querySelector("#latest-block").classList.add("block");

            document
              .querySelector("#latest-block")
              .classList.add(`text-[${color}]`);
            document
              .querySelector("#ordfs-title")
              .classList.add(`text-[${color2}]`);
            document
              .querySelector("#ordfs-subtitle")
              .classList.add(`text-[${color}]`);
            document
              .querySelector("#primary-button")
              .classList.add(`bg-[${darkColor2}]`);
            document
              .querySelector("#secondary-button")
              .classList.add(`bg-[${darkColor}]`);
          }
        } catch (error) {
          console.error(error);
        }
      };
      document.addEventListener("DOMContentLoaded", async () => {
        await fetchBlockStats();
      });

      function stringToColor(input) {
        // Convert input to string in case it's a number
        input = input.toString();

        // Simple hash function for strings
        let hash = 0;
        for (let i = 0; i < input.length; i++) {
          hash = input.charCodeAt(i) + ((hash << 5) - hash);
        }

        // Convert hash to a hex color
        let color = "#";
        for (let i = 0; i < 3; i++) {
          let value = (hash >> (i * 8)) & 0xff; // Use the full range 0-255
          value = Math.floor((value / 255) * 128) + 128; // Adjust the value to the upper half of the range
          color += ("00" + value.toString(16)).substr(-2);
        }

        return color;
      }
    </script>
  </head>
  <body class="bg-black">
    <div class="bg-black text-white min-h-screen">
      <header class="relative"><%- include('../partials/header'); %></header>
    </div>
    <section class="relative transform-gpu overflow-hidden" aria-hidden="true">
      <%- include('../partials/try'); %>
    </section>
    <footer class=""><%- include('../partials/footer'); %></footer>
  </body>
</html>
