{"version":3,"file":"index.umd.js","sources":["../src/provider.ts","../src/lib.ts","../src/routes.ts"],"sourcesContent":["import { JungleBusClient } from \"@gorillapool/js-junglebus\";\nimport * as Client from \"bitcoin-core\";\nimport \"cross-fetch/polyfill\";\nimport createError, { NotFound } from \"http-errors\";\nimport { Redis } from \"ioredis\";\n\nlet redis: Redis;\nif (process.env.REDIS_HOST) {\n  const host = process.env.REDIS_HOST;\n  const port = process.env.REDIS_PORT\n    ? parseInt(process.env.REDIS_PORT, 10)\n    : 6379;\n  console.log(\"Connecting to redis:\", host, port);\n  redis = new Redis(port, host);\n}\n\nexport interface ITxProvider {\n  network: string;\n  getRawTx: (string) => Promise<Buffer>;\n  getBlockchainInfo: () => Promise<{ height: number; hash: string }>;\n  getBlockByHeight: (number) => Promise<{ height: number; hash: string }>;\n  getBlockByHash: (string) => Promise<{ height: number; hash: string }>;\n}\n\nexport class RpcProvider implements ITxProvider {\n  private client: Client;\n\n  constructor(\n    public network: string,\n    host: string,\n    port: string,\n    username: string,\n    password: string\n  ) {\n    this.client = new Client({\n      host,\n      port,\n      username,\n      password,\n    });\n  }\n\n  async getRawTx(txid: string): Promise<Buffer> {\n    let rawtx = await redis?.getBuffer(`rawtx:${txid}`);\n    if (!rawtx) {\n      rawtx = await this.client.getTransactionByHash(txid, {\n        extension: \"bin\",\n      });\n      if (!rawtx) {\n        throw new NotFound();\n      }\n      redis?.set(`rawtx:${txid}`, rawtx);\n    }\n    return rawtx;\n  }\n\n  async getBlockchainInfo(): Promise<{ height: number; hash: string }> {\n    const info = await this.client.getBlockchainInfo();\n    return {\n      height: info.blocks,\n      hash: info.bestblockhash,\n    };\n  }\n\n  async getBlockByHeight(\n    height: number\n  ): Promise<{ height: number; hash: string }> {\n    const hash = await this.client.getBlockHash(height);\n    return { height, hash };\n  }\n\n  async getBlockByHash(\n    hash: string\n  ): Promise<{ height: number; hash: string }> {\n    const info = await this.client.getBlockHeader(hash);\n    return {\n      height: info.height,\n      hash,\n    };\n  }\n}\n\nexport class JungleBusProvider implements ITxProvider {\n  public network = \"bsv\";\n\n  async getRawTx(txid: string): Promise<Buffer> {\n    let rawtx = await redis?.getBuffer(`rawtx:${txid}`);\n    if (!rawtx) {\n      const jb = new JungleBusClient(\"https://junglebus.gorillapool.io\");\n      const txnData = await jb.GetTransaction(txid);\n      rawtx = Buffer.from(txnData!.transaction, \"base64\");\n      redis?.set(`rawtx:${txid}`, rawtx);\n    }\n    return rawtx;\n  }\n\n  async getBlockchainInfo(): Promise<{ height: number; hash: string }> {\n    const resp = await fetch(\n      \"https://api.whatsonchain.com/v1/bsv/main/block/headers\"\n    );\n    if (!resp.ok) {\n      throw createError(resp.status, resp.statusText);\n    }\n    const info = await resp.json();\n    return {\n      height: info[0].height,\n      hash: info[0].hash,\n    };\n  }\n\n  async getBlockByHeight(\n    height: number\n  ): Promise<{ height: number; hash: string }> {\n    const resp = await fetch(\n      `https://api.whatsonchain.com/v1/bsv/main/block/height/${height}`\n    );\n    const info = await resp.json();\n    return { height, hash: info.hash };\n  }\n\n  async getBlockByHash(\n    hash: string\n  ): Promise<{ height: number; hash: string }> {\n    const resp = await fetch(\n      `https://api.whatsonchain.com/v1/bsv/main/block/hash/${hash}`\n    );\n    const info = await resp.json();\n\n    return {\n      height: info.height,\n      hash,\n    };\n  }\n}\n\nexport class BtcProvider implements ITxProvider {\n  public network = \"btc\";\n\n  async getRawTx(txid: string): Promise<Buffer> {\n    let rawtx = await redis?.getBuffer(`rawtx:${txid}`);\n    if (!rawtx) {\n      // TODO: Make this configuration based\n      const resp = await fetch(\n        `https://ordinals.shruggr.cloud/v1/btc/tx/${txid}`\n      );\n      if (!resp.ok) {\n        throw createError(resp.status, resp.statusText);\n      }\n      rawtx = Buffer.from(await resp.arrayBuffer());\n      redis?.set(`rawtx:${txid}`, rawtx);\n    }\n    return rawtx;\n  }\n\n  async getBlockchainInfo(): Promise<{ height: number; hash: string }> {\n    // TODO: Make this configuration based\n    const resp = await fetch(\n      \"https://ordinals.shruggr.cloud/v1/btc/block/latest\"\n    );\n    if (!resp.ok) {\n      throw createError(resp.status, resp.statusText);\n    }\n\n    return resp.json();\n  }\n\n  async getBlockByHeight(\n    height: number\n  ): Promise<{ height: number; hash: string }> {\n    const resp = await fetch(\n      `https://ordinals.shruggr.cloud/v1/btc/block/height/${height}`\n    );\n    const info = await resp.json();\n    return { height, hash: info.hash };\n  }\n\n  async getBlockByHash(\n    hash: string\n  ): Promise<{ height: number; hash: string }> {\n    const resp = await fetch(\n      `https://ordinals.shruggr.cloud/v1/btc/block/hash/${hash}`\n    );\n    const info = await resp.json();\n\n    return {\n      height: info.height,\n      hash,\n    };\n  }\n}\n","import { OpCode, Script, Tx } from \"@ts-bitcoin/core\";\nimport { Transaction } from \"bitcore-lib\";\nimport * as dns from \"dns/promises\";\nimport { NotFound } from \"http-errors\";\nimport {\n  BtcProvider,\n  ITxProvider,\n  JungleBusProvider,\n  RpcProvider,\n} from \"./provider\";\n\nconst B = Buffer.from(\"19HxigV4QyBv3tHpQVcUEQyq1pzZVdoAut\");\nconst ORD = Buffer.from(\"ord\");\n\nlet btcProvider: ITxProvider = new BtcProvider();\nlet bsvProvider: ITxProvider = new JungleBusProvider();\n\nif (process.env.BITCOIN_HOST) {\n  bsvProvider = new RpcProvider(\n    \"bsv\",\n    process.env.BITCOIN_HOST || \"\",\n    process.env.BITCOIN_PORT || \"8332\",\n    process.env.BITCOIN_USER || \"\",\n    process.env.BITCOIN_PASS || \"\"\n  );\n}\n\nif (process.env.BTC_HOST) {\n  btcProvider = new RpcProvider(\n    \"btc\",\n    process.env.BTC_HOST || \"\",\n    process.env.BTC_PORT || \"8332\",\n    process.env.BTC_USER || \"\",\n    process.env.BTC_PASS || \"\"\n  );\n}\n\nexport async function getLatestBlock(\n  network: string\n): Promise<{ height: number; hash: string }> {\n  switch (network) {\n    case \"btc\":\n      return btcProvider.getBlockchainInfo();\n    case \"bsv\":\n      return bsvProvider.getBlockchainInfo();\n    default:\n      throw new NotFound(\"Network Not Found\");\n  }\n}\n\nexport async function getBlockByHeight(\n  network: string,\n  height: number\n): Promise<{ height: number; hash: string }> {\n  switch (network) {\n    case \"btc\":\n      return btcProvider.getBlockByHeight(height);\n    case \"bsv\":\n      return bsvProvider.getBlockByHeight(height);\n    default:\n      throw new NotFound(\"Network Not Found\");\n  }\n}\n\nexport async function getBlockByHash(\n  network: string,\n  hash: string\n): Promise<{ height: number; hash: string }> {\n  switch (network) {\n    case \"btc\":\n      return btcProvider.getBlockByHash(hash);\n    case \"bsv\":\n      return bsvProvider.getBlockByHash(hash);\n    default:\n      throw new NotFound(\"Network Not Found\");\n  }\n}\n\nexport async function getRawTx(\n  network: string,\n  txid: string\n): Promise<Buffer | undefined> {\n  switch (network) {\n    case \"btc\":\n      return btcProvider.getRawTx(txid);\n    case \"bsv\":\n      return bsvProvider.getRawTx(txid);\n    default:\n      throw new NotFound(\"Network Not Found\");\n  }\n}\n\nexport async function loadPointerFromDNS(hostname: string): Promise<string> {\n  const lookupDomain = `_ordfs.${hostname}`;\n  const TXTs = await dns.resolveTxt(lookupDomain);\n  const prefix = \"ordfs=\";\n  let pointer = \"\";\n  console.log(\"Lookup Up:\", lookupDomain);\n  outer: for (const TXT of TXTs) {\n    for (const elem of TXT) {\n      if (!elem.startsWith(prefix)) continue;\n      console.log(\"Elem:\", elem);\n      pointer = elem.slice(prefix.length);\n      console.log(\"Origin:\", pointer);\n      break outer;\n    }\n\n    if (!pointer) {\n      throw new NotFound();\n    }\n  }\n  return pointer;\n}\n\nexport async function loadInscription(pointer: string, metadata = false): Promise<File> {\n  console.log(\"loadInscription\", pointer);\n  let file: File | undefined;\n  if (pointer.match(/^[0-9a-fA-F]{64}_\\d*$/)) {\n    const [txid, vout] = pointer.split(\"_\");\n    console.log(\"BSV:\", txid, vout);\n    const rawtx = await bsvProvider.getRawTx(txid);\n    if (!rawtx) throw new Error(\"No raw tx found\");\n    const tx = Tx.fromBuffer(rawtx);\n    const v = parseInt(vout, 10);\n    const script = tx.txOuts[v].script;\n    if (!script) throw new NotFound();\n    file = parseScript(script);\n    if (file && metadata) {\n      try {\n        const url =`https://ordinals.gorillapool.io/api/inscriptions/outpoint/${pointer}`;\n        const resp = await fetch(url);\n        const data = await resp.json();\n        const { hash } = await bsvProvider.getBlockByHeight(data!.height);\n        const meta: Meta = {\n          height: data.height,\n          MAP: data.MAP,\n          hash,\n          txid,\n          v,\n        };\n        file.meta = meta;\n      } catch {};\n    }\n  } else if (pointer.match(/^[0-9a-fA-F]{64}i\\d+$/) && btcProvider) {\n    const [txid, vin] = pointer.split(\"i\");\n    console.log(\"BTC\", txid, vin);\n    const rawtx = await btcProvider.getRawTx(txid);\n    if (!rawtx) throw new Error(\"No raw tx found\");\n    const tx = new Transaction(rawtx);\n    const script = Script.fromBuffer(tx.inputs[parseInt(vin, 10)].witnesses[1]);\n    if (!script) throw new NotFound();\n    file = parseScript(script);\n  } else throw new Error(\"Invalid Pointer\");\n\n  if (!file) throw new NotFound();\n  return file;\n}\n\nexport interface Meta {\n  height?: number;\n  hash?: string;\n  txid: string;\n  v: number;\n  MAP?: {[key:string]:any}\n}\n\nexport interface File {\n  type: string;\n  data: Buffer;\n  meta?: Meta;\n}\n\nexport interface OrdFS {\n  [filename: string]: string;\n}\n\nexport function parseScript(script: Script): File | undefined {\n  let opFalse = 0;\n  let opIf = 0;\n  let opORD = 0;\n\n  let type = \"application/octet-stream\";\n  let data = Buffer.alloc(0);\n  for (const [i, chunk] of script.chunks.entries()) {\n    if (chunk.buf?.equals(B) && script.chunks.length > i + 2) {\n      data = script.chunks[i + 1].buf!;\n      type = script.chunks[i + 2].buf!.toString();\n      return { data, type };\n    }\n    if (chunk.opCodeNum === OpCode.OP_FALSE) {\n      opFalse = i;\n    }\n    if (chunk.opCodeNum === OpCode.OP_IF) {\n      opIf = i;\n    }\n    if (chunk.buf?.equals(ORD) && opFalse === i - 2 && opIf === i - 1) {\n      opORD = i;\n      break;\n    }\n  }\n\n  for (let i = opORD + 1; i < script.chunks.length; i++) {\n    switch (script.chunks[i].opCodeNum) {\n      case OpCode.OP_FALSE:\n        while (\n          script.chunks[i + 1]?.opCodeNum >= 1 &&\n          script.chunks[i + 1]?.opCodeNum <= OpCode.OP_PUSHDATA4\n        ) {\n          data = Buffer.concat([data, script.chunks[i + 1].buf!]);\n          i++;\n        }\n        break;\n      case 1:\n        // treat 1 like OP_1 (BTC convention)\n        // console.log(script.chunks[i].toString('hex'))\n        if (script.chunks[i].buf![0] != 1) return;\n      case OpCode.OP_TRUE:\n        type = script.chunks[i + 1]!.buf!.toString(\"utf8\");\n        // console.log(\"Type:\", type)\n        i++;\n        break;\n      case OpCode.OP_ENDIF:\n        return { type, data };\n      default:\n        return;\n    }\n  }\n\n  return { type, data };\n}\n","import * as express from \"express\";\nimport { Response } from \"express\";\nimport { NotFound } from \"http-errors\";\nimport {\n  File,\n  OrdFS,\n  getBlockByHash,\n  getBlockByHeight,\n  getLatestBlock,\n  getRawTx,\n  loadInscription,\n  loadPointerFromDNS,\n} from \"./lib\";\n\nfunction sendFile(file: File, res: Response, immutable = true) {\n  res.header(\"Content-Type\", file.type || \"\");\n  if (file.meta) {\n    res.header('ordfs-meta', JSON.stringify(file.meta))\n  }\n  if (immutable && !file.meta) {\n    res.header(\"Cache-Control\", \"public,immutable,max-age=31536000\");\n  }\n  res.status(200).send(file.data);\n}\n\nexport function RegisterRoutes(app: express.Express) {\n  app.get(\"/\", async (req, res) => {\n    let outpoint: string;\n    try {\n      outpoint = await loadPointerFromDNS(req.hostname);\n    } catch (e: any) {\n      // DNS pointer not found\n      res.render(\"pages/index\");\n      return;\n    }\n    try {\n      const file = await loadInscription(outpoint);\n      if (file.type === \"ord-fs/json\" && !req.query[\"raw\"]) {\n        req.res?.redirect(\"index.html\");\n        return;\n      }\n      sendFile(file, res, false);\n    } catch (err) {\n      // TODO: inscription not found\n      res.render(\"pages/404\");\n    }\n  });\n\n  app.get(\"/v1/:network/block/latest\", async (req, res, next) => {\n    try {\n      res.json(await getLatestBlock(req.params.network));\n    } catch (e) {\n      next(e);\n    }\n  });\n\n  app.get(\"/v1/:network/block/height/:height\", async (req, res, next) => {\n    try {\n      res.json(\n        await getBlockByHeight(\n          req.params.network,\n          parseInt(req.params.height, 10)\n        )\n      );\n    } catch (e) {\n      next(e);\n    }\n  });\n\n  app.get(\"/v1/:network/block/hash/:hash\", async (req, res, next) => {\n    try {\n      res.json(await getBlockByHash(req.params.network, req.params.hash));\n    } catch (e) {\n      next(e);\n    }\n  });\n\n  app.get(\"/v1/:network/tx/:txid\", async (req, res) => {\n    res.set(\"Content-type\", \"application/octet-stream\");\n    res.send(await getRawTx(req.params.network, req.params.txid));\n  });\n  app.get(\"/:filename\", getInscriptionOrDnsFile);\n  app.get(\"/content/:pointer\", getInscription);\n  app.get(\"/preview/:b64HtmlData\", previewHtmlFromB64Data);\n  app.get(\"/:pointer/:filename\", getOrdfsFile);\n  app.get(\"/content/:pointer/:filename\", getOrdfsFile);\n\n  async function previewHtmlFromB64Data(req, res, next) {\n    try {\n      const b64HtmlData = req.params.b64HtmlData;\n      const htmlData = Buffer.from(b64HtmlData, \"base64\").toString(\"utf8\");\n      res.render(\"pages/preview\", { htmlData });\n    } catch (err) {\n      next(err);\n    }\n  }\n\n  async function getInscriptionOrDnsFile(req, res, next) {\n    const filename = req.params.filename;\n    try {\n      let pointer: string;\n      let file: File;\n      let immutable = true;\n      try {\n        // check if its an ordfs directory\n        file = await loadInscription(filename, req.query.meta);\n        if (file.type === \"ord-fs/json\" && !req.query.raw) {\n          req.res?.redirect(`/${filename}/index.html`);\n          return;\n        }\n      } catch (e: any) {\n        console.error(\"Outpoint Error\", filename, e.message);\n        pointer = await loadPointerFromDNS(req.hostname);\n        const dirData = await loadInscription(pointer);\n        const dir = JSON.parse(dirData.data!.toString(\"utf8\"));\n        if (!dir[filename]) {\n          throw new NotFound();\n        }\n        pointer = dir[filename].slice(6);\n        file = await loadInscription(pointer, req.query.meta);\n        immutable = false;\n      }\n      sendFile(file, res, immutable);\n    } catch (err) {\n      next(err);\n    }\n  }\n\n  async function getInscription(req, res, next) {\n    const pointer = req.params.pointer;\n    try {\n      const file = await loadInscription(pointer, req.query.meta);\n      // check if its an ordfs directory\n      if (file.type === \"ord-fs/json\" && !req.query.raw) {\n        req.res?.redirect(`/${pointer}/index.html`);\n        return;\n      }\n      sendFile(file, res, true);\n    } catch (err) {\n      next(err);\n    }\n  }\n\n  async function getOrdfsFile(req, res, next) {\n    try {\n      let pointer = req.params.pointer;\n      const filename = req.params.filename;\n      const dirData = await loadInscription(pointer);\n      const dir: OrdFS = JSON.parse(dirData.data!.toString(\"utf8\"));\n      if (!dir[filename]) {\n        throw new NotFound();\n      }\n      if (dir[filename].startsWith(\"ord://\")) {\n        pointer = dir[filename].slice(6);\n      } else {\n        pointer = dir[filename];\n      }\n      const file = await loadInscription(pointer, req.query.meta);\n      sendFile(file, res, true);\n    } catch (err) {\n      next(err);\n    }\n  }\n}\n"],"names":["redis","process","env","REDIS_HOST","host","port","REDIS_PORT","parseInt","console","log","Redis","RpcProvider","network","username","password","this","client","Client","_proto","prototype","getRawTx","txid","_redis","_this","Promise","resolve","getBuffer","then","rawtx","_temp","getTransactionByHash","extension","_this$client$getTrans","_redis2","NotFound","set","_result","e","reject","getBlockchainInfo","info","height","blocks","hash","bestblockhash","getBlockByHeight","getBlockHash","getBlockByHash","getBlockHeader","JungleBusProvider","_proto2","_redis3","_temp2","jb","JungleBusClient","GetTransaction","txnData","_redis4","Buffer","from","transaction","fetch","resp","ok","createError","status","statusText","json","BtcProvider","_proto3","_redis5","_temp3","_Buffer","_from","arrayBuffer","_resp$arrayBuffer","_redis6","call","_result2","_exit2","loadInscription","pointer","metadata","_temp4","file","match","_pointer$split","split","vout","bsvProvider","Error","tx","Tx","fromBuffer","v","script","txOuts","parseScript","data","_ref","meta","MAP","_catch","btcProvider","_pointer$split2","vin","Transaction","Script","inputs","witnesses","loadPointerFromDNS","hostname","lookupDomain","dns","resolveTxt","TXTs","outer","_step","_iterator","_createForOfIteratorHelperLoose","done","_step2","_iterator2","value","elem","startsWith","slice","prefix","getLatestBlock","B","ORD","_step3","opFalse","opIf","opORD","type","alloc","_iterator3","chunks","entries","_chunk$buf","_chunk$buf2","_step3$value","i","chunk","buf","equals","length","toString","opCodeNum","OpCode","OP_FALSE","OP_IF","_script$chunks","_script$chunks2","OP_PUSHDATA4","concat","OP_TRUE","OP_ENDIF","sendFile","res","immutable","header","JSON","stringify","send","BITCOIN_HOST","BITCOIN_PORT","BITCOIN_USER","BITCOIN_PASS","BTC_HOST","BTC_PORT","BTC_USER","BTC_PASS","app","getOrdfsFile","req","next","params","filename","dirData","dir","parse","query","err","get","_exit","outpoint","_req$res","redirect","render","_loadPointerFromDNS","_json","_getLatestBlock","_json2","_getBlockByHeight","_temp5","_json3","_getBlockByHash","_send","_getRawTx","_temp7","_result3","_temp6","_loadInscription","_req$res2","raw","error","message","_loadPointerFromDNS2","_loadInscription2","_req$res3","htmlData","b64HtmlData"],"mappings":"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"}