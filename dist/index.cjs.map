{"version":3,"file":"index.cjs","sources":["../src/provider.ts","../src/lib.ts","../src/routes.ts"],"sourcesContent":["import { JungleBusClient } from \"@gorillapool/js-junglebus\";\nimport * as Client from \"bitcoin-core\";\nimport fetch from \"cross-fetch\";\nimport createError, { NotFound } from \"http-errors\";\nimport { Redis } from \"ioredis\";\n\nlet redis: Redis;\nif (process.env.REDIS_HOST) {\n  const host = process.env.REDIS_HOST;\n  const port = process.env.REDIS_PORT\n    ? parseInt(process.env.REDIS_PORT, 10)\n    : 6379;\n  console.log(\"Connecting to redis:\", host, port);\n  redis = new Redis(port, host);\n}\n\nexport interface ITxProvider {\n  network: string;\n  getRawTx: (string) => Promise<Buffer>;\n  getBlockchainInfo: () => Promise<{ height: number; hash: string }>;\n  getBlockByHeight: (number) => Promise<{ height: number; hash: string }>;\n  getBlockByHash: (string) => Promise<{ height: number; hash: string }>;\n}\n\nexport class RpcProvider implements ITxProvider {\n  private client: Client;\n\n  constructor(\n    public network: string,\n    host: string,\n    port: string,\n    username: string,\n    password: string\n  ) {\n    this.client = new Client({\n      host,\n      port,\n      username,\n      password,\n    });\n  }\n\n  async getRawTx(txid: string): Promise<Buffer> {\n    let rawtx = await redis?.getBuffer(`rawtx:${txid}`);\n    if (!rawtx) {\n      rawtx = await this.client.getTransactionByHash(txid, {\n        extension: \"bin\",\n      });\n      if (!rawtx) {\n        throw new NotFound();\n      }\n      redis?.set(`rawtx:${txid}`, rawtx);\n    }\n    return rawtx;\n  }\n\n  async getBlockchainInfo(): Promise<{ height: number; hash: string }> {\n    const info = await this.client.getBlockchainInfo();\n    return {\n      height: info.blocks,\n      hash: info.bestblockhash,\n    };\n  }\n\n  async getBlockByHeight(\n    height: number\n  ): Promise<{ height: number; hash: string }> {\n    const hash = await this.client.getBlockHash(height);\n    return { height, hash };\n  }\n\n  async getBlockByHash(\n    hash: string\n  ): Promise<{ height: number; hash: string }> {\n    const info = await this.client.getBlockHeader(hash);\n    return {\n      height: info.height,\n      hash,\n    };\n  }\n}\n\nexport class JungleBusProvider implements ITxProvider {\n  public network = \"bsv\";\n\n  async getRawTx(txid: string): Promise<Buffer> {\n    let rawtx = await redis?.getBuffer(`rawtx:${txid}`);\n    if (!rawtx) {\n      const jb = new JungleBusClient(\"https://junglebus.gorillapool.io\");\n      const txnData = await jb.GetTransaction(txid);\n      rawtx = Buffer.from(txnData!.transaction, \"base64\");\n      redis?.set(`rawtx:${txid}`, rawtx);\n    }\n    return rawtx;\n  }\n\n  async getBlockchainInfo(): Promise<{ height: number; hash: string }> {\n    const resp = await fetch(\n      \"https://api.whatsonchain.com/v1/bsv/main/block/headers\"\n    );\n    if (!resp.ok) {\n      throw createError(resp.status, resp.statusText);\n    }\n    const info = await resp.json();\n    return {\n      height: info[0].height,\n      hash: info[0].hash,\n    };\n  }\n\n  async getBlockByHeight(\n    height: number\n  ): Promise<{ height: number; hash: string }> {\n    const resp = await fetch(\n      `https://api.whatsonchain.com/v1/bsv/main/block/height/${height}`\n    );\n    const info = await resp.json();\n    return { height, hash: info.hash };\n  }\n\n  async getBlockByHash(\n    hash: string\n  ): Promise<{ height: number; hash: string }> {\n    const resp = await fetch(\n      `https://api.whatsonchain.com/v1/bsv/main/block/hash/${hash}`\n    );\n    const info = await resp.json();\n\n    return {\n      height: info.height,\n      hash,\n    };\n  }\n}\n\nexport class BtcProvider implements ITxProvider {\n  public network = \"btc\";\n\n  async getRawTx(txid: string): Promise<Buffer> {\n    let rawtx = await redis?.getBuffer(`rawtx:${txid}`);\n    if (!rawtx) {\n      // TODO: Make this configuration based\n      const resp = await fetch(\n        `https://ordinals.shruggr.cloud/v1/btc/tx/${txid}`\n      );\n      if (!resp.ok) {\n        throw createError(resp.status, resp.statusText);\n      }\n      rawtx = Buffer.from(await resp.arrayBuffer());\n      redis?.set(`rawtx:${txid}`, rawtx);\n    }\n    return rawtx;\n  }\n\n  async getBlockchainInfo(): Promise<{ height: number; hash: string }> {\n    // TODO: Make this configuration based\n    const resp = await fetch(\n      \"https://ordinals.shruggr.cloud/v1/btc/block/latest\"\n    );\n    if (!resp.ok) {\n      throw createError(resp.status, resp.statusText);\n    }\n\n    return resp.json();\n  }\n\n  async getBlockByHeight(\n    height: number\n  ): Promise<{ height: number; hash: string }> {\n    const resp = await fetch(\n      `https://ordinals.shruggr.cloud/v1/btc/block/height/${height}`\n    );\n    const info = await resp.json();\n    return { height, hash: info.hash };\n  }\n\n  async getBlockByHash(\n    hash: string\n  ): Promise<{ height: number; hash: string }> {\n    const resp = await fetch(\n      `https://ordinals.shruggr.cloud/v1/btc/block/hash/${hash}`\n    );\n    const info = await resp.json();\n\n    return {\n      height: info.height,\n      hash,\n    };\n  }\n}\n","import { OpCode, Script, Tx } from \"@ts-bitcoin/core\";\nimport { Transaction } from \"bitcore-lib\";\nimport * as dns from \"dns/promises\";\nimport { NotFound } from \"http-errors\";\nimport fetch from \"cross-fetch\";\nimport {\n  BtcProvider,\n  ITxProvider,\n  JungleBusProvider,\n  RpcProvider,\n} from \"./provider\";\n\nconst B = Buffer.from(\"19HxigV4QyBv3tHpQVcUEQyq1pzZVdoAut\");\nconst ORD = Buffer.from(\"ord\");\n\nlet btcProvider: ITxProvider = new BtcProvider();\nlet bsvProvider: ITxProvider = new JungleBusProvider();\n\nif (process.env.BITCOIN_HOST) {\n  bsvProvider = new RpcProvider(\n    \"bsv\",\n    process.env.BITCOIN_HOST || \"\",\n    process.env.BITCOIN_PORT || \"8332\",\n    process.env.BITCOIN_USER || \"\",\n    process.env.BITCOIN_PASS || \"\"\n  );\n}\n\nif (process.env.BTC_HOST) {\n  btcProvider = new RpcProvider(\n    \"btc\",\n    process.env.BTC_HOST || \"\",\n    process.env.BTC_PORT || \"8332\",\n    process.env.BTC_USER || \"\",\n    process.env.BTC_PASS || \"\"\n  );\n}\n\nexport async function getLatestBlock(\n  network: string\n): Promise<{ height: number; hash: string }> {\n  switch (network) {\n    case \"btc\":\n      return btcProvider.getBlockchainInfo();\n    case \"bsv\":\n      return bsvProvider.getBlockchainInfo();\n    default:\n      throw new NotFound(\"Network Not Found\");\n  }\n}\n\nexport async function getBlockByHeight(\n  network: string,\n  height: number\n): Promise<{ height: number; hash: string }> {\n  switch (network) {\n    case \"btc\":\n      return btcProvider.getBlockByHeight(height);\n    case \"bsv\":\n      return bsvProvider.getBlockByHeight(height);\n    default:\n      throw new NotFound(\"Network Not Found\");\n  }\n}\n\nexport async function getBlockByHash(\n  network: string,\n  hash: string\n): Promise<{ height: number; hash: string }> {\n  switch (network) {\n    case \"btc\":\n      return btcProvider.getBlockByHash(hash);\n    case \"bsv\":\n      return bsvProvider.getBlockByHash(hash);\n    default:\n      throw new NotFound(\"Network Not Found\");\n  }\n}\n\nexport async function getRawTx(\n  network: string,\n  txid: string\n): Promise<Buffer | undefined> {\n  switch (network) {\n    case \"btc\":\n      return btcProvider.getRawTx(txid);\n    case \"bsv\":\n      return bsvProvider.getRawTx(txid);\n    default:\n      throw new NotFound(\"Network Not Found\");\n  }\n}\n\nexport async function loadPointerFromDNS(hostname: string): Promise<string> {\n  const lookupDomain = `_ordfs.${hostname}`;\n  const TXTs = await dns.resolveTxt(lookupDomain);\n  const prefix = \"ordfs=\";\n  let pointer = \"\";\n  console.log(\"Lookup Up:\", lookupDomain);\n  outer: for (const TXT of TXTs) {\n    for (const elem of TXT) {\n      if (!elem.startsWith(prefix)) continue;\n      console.log(\"Elem:\", elem);\n      pointer = elem.slice(prefix.length);\n      console.log(\"Origin:\", pointer);\n      break outer;\n    }\n\n    if (!pointer) {\n      throw new NotFound();\n    }\n  }\n  return pointer;\n}\n\nexport async function loadInscription(pointer: string, metadata = false): Promise<File> {\n  console.log(\"loadInscription\", pointer);\n  let file: File | undefined;\n  if (pointer.match(/^[0-9a-fA-F]{64}_\\d*$/)) {\n    const [txid, vout] = pointer.split(\"_\");\n    console.log(\"BSV:\", txid, vout);\n    const rawtx = await bsvProvider.getRawTx(txid);\n    if (!rawtx) throw new Error(\"No raw tx found\");\n    const tx = Tx.fromBuffer(rawtx);\n    const v = parseInt(vout, 10);\n    const script = tx.txOuts[v].script;\n    if (!script) throw new NotFound();\n    file = parseScript(script);\n    if (file && metadata) {\n      try {\n        const url =`https://ordinals.gorillapool.io/api/inscriptions/outpoint/${pointer}`;\n        const resp = await fetch(url);\n        const data = await resp.json();\n        const { hash } = await bsvProvider.getBlockByHeight(data!.height);\n        const meta: Meta = {\n          height: data.height,\n          MAP: data.MAP,\n          hash,\n          txid,\n          v,\n        };\n        file.meta = meta;\n      } catch {};\n    }\n  } else if (pointer.match(/^[0-9a-fA-F]{64}i\\d+$/) && btcProvider) {\n    const [txid, vin] = pointer.split(\"i\");\n    console.log(\"BTC\", txid, vin);\n    const rawtx = await btcProvider.getRawTx(txid);\n    if (!rawtx) throw new Error(\"No raw tx found\");\n    const tx = new Transaction(rawtx);\n    const script = Script.fromBuffer(tx.inputs[parseInt(vin, 10)].witnesses[1]);\n    if (!script) throw new NotFound();\n    file = parseScript(script);\n  } else throw new Error(\"Invalid Pointer\");\n\n  if (!file) throw new NotFound();\n  return file;\n}\n\nexport interface Meta {\n  height?: number;\n  hash?: string;\n  txid: string;\n  v: number;\n  MAP?: {[key:string]:any}\n}\n\nexport interface File {\n  type: string;\n  data: Buffer;\n  meta?: Meta;\n}\n\nexport interface OrdFS {\n  [filename: string]: string;\n}\n\nexport function parseScript(script: Script): File | undefined {\n  let opFalse = 0;\n  let opIf = 0;\n  let opORD = 0;\n\n  let type = \"application/octet-stream\";\n  let data = Buffer.alloc(0);\n  for (const [i, chunk] of script.chunks.entries()) {\n    if (chunk.buf?.equals(B) && script.chunks.length > i + 2) {\n      data = script.chunks[i + 1].buf!;\n      type = script.chunks[i + 2].buf!.toString();\n      return { data, type };\n    }\n    if (chunk.opCodeNum === OpCode.OP_FALSE) {\n      opFalse = i;\n    }\n    if (chunk.opCodeNum === OpCode.OP_IF) {\n      opIf = i;\n    }\n    if (chunk.buf?.equals(ORD) && opFalse === i - 2 && opIf === i - 1) {\n      opORD = i;\n      break;\n    }\n  }\n\n  for (let i = opORD + 1; i < script.chunks.length; i++) {\n    switch (script.chunks[i].opCodeNum) {\n      case OpCode.OP_FALSE:\n        while (\n          script.chunks[i + 1]?.opCodeNum >= 1 &&\n          script.chunks[i + 1]?.opCodeNum <= OpCode.OP_PUSHDATA4\n        ) {\n          data = Buffer.concat([data, script.chunks[i + 1].buf!]);\n          i++;\n        }\n        break;\n      case 1:\n        // treat 1 like OP_1 (BTC convention)\n        // console.log(script.chunks[i].toString('hex'))\n        if (script.chunks[i].buf![0] != 1) return;\n      case OpCode.OP_TRUE:\n        type = script.chunks[i + 1]!.buf!.toString(\"utf8\");\n        // console.log(\"Type:\", type)\n        i++;\n        break;\n      case OpCode.OP_ENDIF:\n        return { type, data };\n      default:\n        return;\n    }\n  }\n\n  return { type, data };\n}\n","import * as express from \"express\";\nimport { Response } from \"express\";\nimport { NotFound } from \"http-errors\";\nimport {\n  File,\n  OrdFS,\n  getBlockByHash,\n  getBlockByHeight,\n  getLatestBlock,\n  getRawTx,\n  loadInscription,\n  loadPointerFromDNS,\n} from \"./lib\";\n\nfunction sendFile(file: File, res: Response, immutable = true) {\n  res.header(\"Content-Type\", file.type || \"\");\n  if (file.meta) {\n    res.header('ordfs-meta', JSON.stringify(file.meta))\n  }\n  if (immutable && !file.meta) {\n    res.header(\"Cache-Control\", \"public,immutable,max-age=31536000\");\n  }\n  res.status(200).send(file.data);\n}\n\nexport function RegisterRoutes(app: express.Express) {\n  app.get(\"/\", async (req, res) => {\n    let outpoint: string;\n    try {\n      outpoint = await loadPointerFromDNS(req.hostname);\n    } catch (e: any) {\n      // DNS pointer not found\n      res.render(\"pages/index\");\n      return;\n    }\n    try {\n      const file = await loadInscription(outpoint);\n      if (file.type === \"ord-fs/json\" && !req.query[\"raw\"]) {\n        req.res?.redirect(\"index.html\");\n        return;\n      }\n      sendFile(file, res, false);\n    } catch (err) {\n      // TODO: inscription not found\n      res.render(\"pages/404\");\n    }\n  });\n\n  app.get(\"/v1/:network/block/latest\", async (req, res, next) => {\n    try {\n      res.json(await getLatestBlock(req.params.network));\n    } catch (e) {\n      next(e);\n    }\n  });\n\n  app.get(\"/v1/:network/block/height/:height\", async (req, res, next) => {\n    try {\n      res.json(\n        await getBlockByHeight(\n          req.params.network,\n          parseInt(req.params.height, 10)\n        )\n      );\n    } catch (e) {\n      next(e);\n    }\n  });\n\n  app.get(\"/v1/:network/block/hash/:hash\", async (req, res, next) => {\n    try {\n      res.json(await getBlockByHash(req.params.network, req.params.hash));\n    } catch (e) {\n      next(e);\n    }\n  });\n\n  app.get(\"/v1/:network/tx/:txid\", async (req, res) => {\n    res.set(\"Content-type\", \"application/octet-stream\");\n    res.send(await getRawTx(req.params.network, req.params.txid));\n  });\n  app.get(\"/:filename\", getInscriptionOrDnsFile);\n  app.get(\"/content/:pointer\", getInscription);\n  app.get(\"/preview/:b64HtmlData\", previewHtmlFromB64Data);\n  app.get(\"/:pointer/:filename\", getOrdfsFile);\n  app.get(\"/content/:pointer/:filename\", getOrdfsFile);\n\n  async function previewHtmlFromB64Data(req, res, next) {\n    try {\n      const b64HtmlData = req.params.b64HtmlData;\n      const htmlData = Buffer.from(b64HtmlData, \"base64\").toString(\"utf8\");\n      res.render(\"pages/preview\", { htmlData });\n    } catch (err) {\n      next(err);\n    }\n  }\n\n  async function getInscriptionOrDnsFile(req, res, next) {\n    const filename = req.params.filename;\n    try {\n      let pointer: string;\n      let file: File;\n      let immutable = true;\n      try {\n        // check if its an ordfs directory\n        file = await loadInscription(filename, req.query.meta);\n        if (file.type === \"ord-fs/json\" && !req.query.raw) {\n          req.res?.redirect(`/${filename}/index.html`);\n          return;\n        }\n      } catch (e: any) {\n        console.error(\"Outpoint Error\", filename, e.message);\n        pointer = await loadPointerFromDNS(req.hostname);\n        const dirData = await loadInscription(pointer);\n        const dir = JSON.parse(dirData.data!.toString(\"utf8\"));\n        if (!dir[filename]) {\n          throw new NotFound();\n        }\n        pointer = dir[filename].slice(6);\n        file = await loadInscription(pointer, req.query.meta);\n        immutable = false;\n      }\n      sendFile(file, res, immutable);\n    } catch (err) {\n      next(err);\n    }\n  }\n\n  async function getInscription(req, res, next) {\n    const pointer = req.params.pointer;\n    try {\n      const file = await loadInscription(pointer, req.query.meta);\n      // check if its an ordfs directory\n      if (file.type === \"ord-fs/json\" && !req.query.raw) {\n        req.res?.redirect(`/${pointer}/index.html`);\n        return;\n      }\n      sendFile(file, res, true);\n    } catch (err) {\n      next(err);\n    }\n  }\n\n  async function getOrdfsFile(req, res, next) {\n    try {\n      let pointer = req.params.pointer;\n      const filename = req.params.filename;\n      const dirData = await loadInscription(pointer);\n      const dir: OrdFS = JSON.parse(dirData.data!.toString(\"utf8\"));\n      if (!dir[filename]) {\n        throw new NotFound();\n      }\n      if (dir[filename].startsWith(\"ord://\")) {\n        pointer = dir[filename].slice(6);\n      } else {\n        pointer = dir[filename];\n      }\n      const file = await loadInscription(pointer, req.query.meta);\n      sendFile(file, res, true);\n    } catch (err) {\n      next(err);\n    }\n  }\n}\n"],"names":["redis","process","env","REDIS_HOST","host","port","REDIS_PORT","parseInt","console","log","Redis","RpcProvider","network","username","password","client","this","Client","_proto","prototype","getRawTx","txid","_redis","_this","Promise","resolve","getBuffer","then","rawtx","_exit","_temp","getTransactionByHash","extension","_this$client$getTrans","_redis2","NotFound","set","_result","e","reject","getBlockchainInfo","info","height","blocks","hash","bestblockhash","getBlockByHeight","getBlockHash","getBlockByHash","getBlockHeader","JungleBusProvider","_proto2","_redis3","_temp2","jb","JungleBusClient","GetTransaction","txnData","_redis4","Buffer","from","transaction","fetch","resp","ok","createError","status","statusText","json","BtcProvider","_proto3","_redis5","_temp3","_Buffer","_from","arrayBuffer","_resp$arrayBuffer","_redis6","call","_result2","loadInscription","pointer","metadata","file","_temp4","match","_pointer$split","split","vout","bsvProvider","Error","tx","Tx","fromBuffer","v","script","txOuts","parseScript","data","_ref","meta","MAP","_catch","btcProvider","_pointer$split2","vin","Transaction","Script","inputs","witnesses","loadPointerFromDNS","hostname","lookupDomain","dns","resolveTxt","TXTs","outer","_iterator","_step","_createForOfIteratorHelperLoose","done","_step2","_iterator2","value","elem","startsWith","slice","prefix","getLatestBlock","B","ORD","_step3","opFalse","opIf","opORD","type","alloc","_iterator3","chunks","entries","_chunk$buf","_chunk$buf2","_step3$value","i","chunk","buf","equals","length","toString","opCodeNum","OpCode","OP_FALSE","OP_IF","_script$chunks","_script$chunks2","OP_PUSHDATA4","concat","OP_TRUE","OP_ENDIF","sendFile","res","immutable","header","JSON","stringify","send","BITCOIN_HOST","BITCOIN_PORT","BITCOIN_USER","BITCOIN_PASS","BTC_HOST","BTC_PORT","BTC_USER","BTC_PASS","app","getOrdfsFile","req","next","params","filename","dirData","dir","parse","query","err","get","outpoint","_req$res","redirect","render","_loadPointerFromDNS","_json","_getLatestBlock","_json2","_getBlockByHeight","_temp5","_json3","_getBlockByHash","_send","_getRawTx","_exit2","_temp7","_result3","_temp6","_loadInscription","_req$res2","raw","error","message","_loadPointerFromDNS2","_loadInscription2","_req$res3","htmlData","b64HtmlData"],"mappings":"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"}